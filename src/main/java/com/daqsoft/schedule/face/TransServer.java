/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.daqsoft.schedule.face;

import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Generated;

import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-02-01")
public class TransServer
{

	public interface Iface
	{
		public String sendTask(String task) throws org.apache.thrift.TException;

		public String getStatus() throws org.apache.thrift.TException;

		public List<String> getAllRunning() throws org.apache.thrift.TException;

	}

	public interface AsyncIface
	{

		public void sendTask(String task,
				org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException;

		public void getStatus(
				org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException;

		public void getAllRunning(
				org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException;

	}

	public static class Client extends org.apache.thrift.TServiceClient
			implements
				Iface
	{
		public static class Factory
				implements
					org.apache.thrift.TServiceClientFactory<Client>
		{
			public Factory()
			{
			}
			@Override
			public Client getClient(org.apache.thrift.protocol.TProtocol prot)
			{
				return new Client(prot);
			}
			@Override
			public Client getClient(org.apache.thrift.protocol.TProtocol iprot,
					org.apache.thrift.protocol.TProtocol oprot)
			{
				return new Client(iprot, oprot);
			}
		}

		public Client(org.apache.thrift.protocol.TProtocol prot)
		{
			super(prot, prot);
		}

		public Client(org.apache.thrift.protocol.TProtocol iprot,
				org.apache.thrift.protocol.TProtocol oprot)
		{
			super(iprot, oprot);
		}

		@Override
		public String sendTask(String task) throws org.apache.thrift.TException
		{
			send_sendTask(task);
			return recv_sendTask();
		}

		public void send_sendTask(String task)
				throws org.apache.thrift.TException
		{
			sendTask_args args = new sendTask_args();
			args.setTask(task);
			sendBase("sendTask", args);
		}

		public String recv_sendTask() throws org.apache.thrift.TException
		{
			sendTask_result result = new sendTask_result();
			receiveBase(result, "sendTask");
			if (result.isSetSuccess())
			{
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(
					org.apache.thrift.TApplicationException.MISSING_RESULT,
					"sendTask failed: unknown result");
		}

		@Override
		public String getStatus() throws org.apache.thrift.TException
		{
			send_getStatus();
			return recv_getStatus();
		}

		public void send_getStatus() throws org.apache.thrift.TException
		{
			getStatus_args args = new getStatus_args();
			sendBase("getStatus", args);
		}

		public String recv_getStatus() throws org.apache.thrift.TException
		{
			getStatus_result result = new getStatus_result();
			receiveBase(result, "getStatus");
			if (result.isSetSuccess())
			{
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(
					org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getStatus failed: unknown result");
		}

		@Override
		public List<String> getAllRunning() throws org.apache.thrift.TException
		{
			send_getAllRunning();
			return recv_getAllRunning();
		}

		public void send_getAllRunning() throws org.apache.thrift.TException
		{
			getAllRunning_args args = new getAllRunning_args();
			sendBase("getAllRunning", args);
		}

		public List<String> recv_getAllRunning()
				throws org.apache.thrift.TException
		{
			getAllRunning_result result = new getAllRunning_result();
			receiveBase(result, "getAllRunning");
			if (result.isSetSuccess())
			{
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(
					org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getAllRunning failed: unknown result");
		}

	}
	public static class AsyncClient extends org.apache.thrift.async.TAsyncClient
			implements
				AsyncIface
	{
		public static class Factory
				implements
					org.apache.thrift.async.TAsyncClientFactory<AsyncClient>
		{
			private org.apache.thrift.async.TAsyncClientManager clientManager;
			private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
			public Factory(
					org.apache.thrift.async.TAsyncClientManager clientManager,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory)
			{
				this.clientManager = clientManager;
				this.protocolFactory = protocolFactory;
			}
			@Override
			public AsyncClient getAsyncClient(
					org.apache.thrift.transport.TNonblockingTransport transport)
			{
				return new AsyncClient(protocolFactory, clientManager,
						transport);
			}
		}

		public AsyncClient(
				org.apache.thrift.protocol.TProtocolFactory protocolFactory,
				org.apache.thrift.async.TAsyncClientManager clientManager,
				org.apache.thrift.transport.TNonblockingTransport transport)
		{
			super(protocolFactory, clientManager, transport);
		}

		@Override
		public void sendTask(String task,
				org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException
		{
			checkReady();
			sendTask_call method_call = new sendTask_call(task, resultHandler,
					this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class sendTask_call
				extends
					org.apache.thrift.async.TAsyncMethodCall
		{
			private String task;
			public sendTask_call(String task,
					org.apache.thrift.async.AsyncMethodCallback resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport)
					throws org.apache.thrift.TException
			{
				super(client, protocolFactory, transport, resultHandler, false);
				this.task = task;
			}

			@Override
			public void write_args(org.apache.thrift.protocol.TProtocol prot)
					throws org.apache.thrift.TException
			{
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
						"sendTask",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				sendTask_args args = new sendTask_args();
				args.setTask(task);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public String getResult() throws org.apache.thrift.TException
			{
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ)
				{
					throw new IllegalStateException(
							"Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client
						.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_sendTask();
			}
		}

		@Override
		public void getStatus(
				org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException
		{
			checkReady();
			getStatus_call method_call = new getStatus_call(resultHandler, this,
					___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getStatus_call
				extends
					org.apache.thrift.async.TAsyncMethodCall
		{
			public getStatus_call(
					org.apache.thrift.async.AsyncMethodCallback resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport)
					throws org.apache.thrift.TException
			{
				super(client, protocolFactory, transport, resultHandler, false);
			}

			@Override
			public void write_args(org.apache.thrift.protocol.TProtocol prot)
					throws org.apache.thrift.TException
			{
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
						"getStatus",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getStatus_args args = new getStatus_args();
				args.write(prot);
				prot.writeMessageEnd();
			}

			public String getResult() throws org.apache.thrift.TException
			{
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ)
				{
					throw new IllegalStateException(
							"Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client
						.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getStatus();
			}
		}

		@Override
		public void getAllRunning(
				org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException
		{
			checkReady();
			getAllRunning_call method_call = new getAllRunning_call(
					resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getAllRunning_call
				extends
					org.apache.thrift.async.TAsyncMethodCall
		{
			public getAllRunning_call(
					org.apache.thrift.async.AsyncMethodCallback resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport)
					throws org.apache.thrift.TException
			{
				super(client, protocolFactory, transport, resultHandler, false);
			}

			@Override
			public void write_args(org.apache.thrift.protocol.TProtocol prot)
					throws org.apache.thrift.TException
			{
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
						"getAllRunning",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getAllRunning_args args = new getAllRunning_args();
				args.write(prot);
				prot.writeMessageEnd();
			}

			public List<String> getResult() throws org.apache.thrift.TException
			{
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ)
				{
					throw new IllegalStateException(
							"Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client
						.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getAllRunning();
			}
		}

	}

	public static class Processor<I extends Iface>
			extends
				org.apache.thrift.TBaseProcessor<I>
			implements
				org.apache.thrift.TProcessor
	{
		private static final Logger LOGGER = LoggerFactory
				.getLogger(Processor.class.getName());
		public Processor(I iface)
		{
			super(iface, getProcessMap(
					new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
		}

		protected Processor(I iface,
				Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap)
		{
			super(iface, getProcessMap(processMap));
		}

		private static <I extends Iface> Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(
				Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap)
		{
			processMap.put("sendTask", new sendTask());
			processMap.put("getStatus", new getStatus());
			processMap.put("getAllRunning", new getAllRunning());
			return processMap;
		}

		public static class sendTask<I extends Iface>
				extends
					org.apache.thrift.ProcessFunction<I, sendTask_args>
		{
			public sendTask()
			{
				super("sendTask");
			}

			@Override
			public sendTask_args getEmptyArgsInstance()
			{
				return new sendTask_args();
			}

			@Override
			protected boolean isOneway()
			{
				return false;
			}

			@Override
			public sendTask_result getResult(I iface, sendTask_args args)
					throws org.apache.thrift.TException
			{
				sendTask_result result = new sendTask_result();
				result.success = iface.sendTask(args.task);
				return result;
			}
		}

		public static class getStatus<I extends Iface>
				extends
					org.apache.thrift.ProcessFunction<I, getStatus_args>
		{
			public getStatus()
			{
				super("getStatus");
			}

			@Override
			public getStatus_args getEmptyArgsInstance()
			{
				return new getStatus_args();
			}

			@Override
			protected boolean isOneway()
			{
				return false;
			}

			@Override
			public getStatus_result getResult(I iface, getStatus_args args)
					throws org.apache.thrift.TException
			{
				getStatus_result result = new getStatus_result();
				result.success = iface.getStatus();
				return result;
			}
		}

		public static class getAllRunning<I extends Iface>
				extends
					org.apache.thrift.ProcessFunction<I, getAllRunning_args>
		{
			public getAllRunning()
			{
				super("getAllRunning");
			}

			@Override
			public getAllRunning_args getEmptyArgsInstance()
			{
				return new getAllRunning_args();
			}

			@Override
			protected boolean isOneway()
			{
				return false;
			}

			@Override
			public getAllRunning_result getResult(I iface,
					getAllRunning_args args) throws org.apache.thrift.TException
			{
				getAllRunning_result result = new getAllRunning_result();
				result.success = iface.getAllRunning();
				return result;
			}
		}

	}

	public static class AsyncProcessor<I extends AsyncIface>
			extends
				org.apache.thrift.TBaseAsyncProcessor<I>
	{
		private static final Logger LOGGER = LoggerFactory
				.getLogger(AsyncProcessor.class.getName());
		public AsyncProcessor(I iface)
		{
			super(iface, getProcessMap(
					new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
		}

		protected AsyncProcessor(I iface,
				Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap)
		{
			super(iface, getProcessMap(processMap));
		}

		private static <I extends AsyncIface> Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> getProcessMap(
				Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap)
		{
			processMap.put("sendTask", new sendTask());
			processMap.put("getStatus", new getStatus());
			processMap.put("getAllRunning", new getAllRunning());
			return processMap;
		}

		public static class sendTask<I extends AsyncIface>
				extends
					org.apache.thrift.AsyncProcessFunction<I, sendTask_args, String>
		{
			public sendTask()
			{
				super("sendTask");
			}

			@Override
			public sendTask_args getEmptyArgsInstance()
			{
				return new sendTask_args();
			}

			@Override
			public AsyncMethodCallback<String> getResultHandler(
					final AsyncFrameBuffer fb, final int seqid)
			{
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<String>() {
					@Override
					public void onComplete(String o)
					{
						sendTask_result result = new sendTask_result();
						result.success = o;
						try
						{
							fcall.sendResponse(fb, result,
									org.apache.thrift.protocol.TMessageType.REPLY,
									seqid);
							return;
						} catch (Exception e)
						{
							LOGGER.error(
									"Exception writing to internal frame buffer",
									e);
						}
						fb.close();
					}
					@Override
					public void onError(Exception e)
					{
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						sendTask_result result = new sendTask_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR,
									e.getMessage());
						}
						try
						{
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex)
						{
							LOGGER.error(
									"Exception writing to internal frame buffer",
									ex);
						}
						fb.close();
					}
				};
			}

			@Override
			protected boolean isOneway()
			{
				return false;
			}

			@Override
			public void start(I iface, sendTask_args args,
					org.apache.thrift.async.AsyncMethodCallback<String> resultHandler)
					throws TException
			{
				iface.sendTask(args.task, resultHandler);
			}
		}

		public static class getStatus<I extends AsyncIface>
				extends
					org.apache.thrift.AsyncProcessFunction<I, getStatus_args, String>
		{
			public getStatus()
			{
				super("getStatus");
			}

			@Override
			public getStatus_args getEmptyArgsInstance()
			{
				return new getStatus_args();
			}

			@Override
			public AsyncMethodCallback<String> getResultHandler(
					final AsyncFrameBuffer fb, final int seqid)
			{
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<String>() {
					@Override
					public void onComplete(String o)
					{
						getStatus_result result = new getStatus_result();
						result.success = o;
						try
						{
							fcall.sendResponse(fb, result,
									org.apache.thrift.protocol.TMessageType.REPLY,
									seqid);
							return;
						} catch (Exception e)
						{
							LOGGER.error(
									"Exception writing to internal frame buffer",
									e);
						}
						fb.close();
					}
					@Override
					public void onError(Exception e)
					{
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						getStatus_result result = new getStatus_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR,
									e.getMessage());
						}
						try
						{
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex)
						{
							LOGGER.error(
									"Exception writing to internal frame buffer",
									ex);
						}
						fb.close();
					}
				};
			}

			@Override
			protected boolean isOneway()
			{
				return false;
			}

			@Override
			public void start(I iface, getStatus_args args,
					org.apache.thrift.async.AsyncMethodCallback<String> resultHandler)
					throws TException
			{
				iface.getStatus(resultHandler);
			}
		}

		public static class getAllRunning<I extends AsyncIface>
				extends
					org.apache.thrift.AsyncProcessFunction<I, getAllRunning_args, List<String>>
		{
			public getAllRunning()
			{
				super("getAllRunning");
			}

			@Override
			public getAllRunning_args getEmptyArgsInstance()
			{
				return new getAllRunning_args();
			}

			@Override
			public AsyncMethodCallback<List<String>> getResultHandler(
					final AsyncFrameBuffer fb, final int seqid)
			{
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<List<String>>() {
					@Override
					public void onComplete(List<String> o)
					{
						getAllRunning_result result = new getAllRunning_result();
						result.success = o;
						try
						{
							fcall.sendResponse(fb, result,
									org.apache.thrift.protocol.TMessageType.REPLY,
									seqid);
							return;
						} catch (Exception e)
						{
							LOGGER.error(
									"Exception writing to internal frame buffer",
									e);
						}
						fb.close();
					}
					@Override
					public void onError(Exception e)
					{
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						getAllRunning_result result = new getAllRunning_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR,
									e.getMessage());
						}
						try
						{
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex)
						{
							LOGGER.error(
									"Exception writing to internal frame buffer",
									ex);
						}
						fb.close();
					}
				};
			}

			@Override
			protected boolean isOneway()
			{
				return false;
			}

			@Override
			public void start(I iface, getAllRunning_args args,
					org.apache.thrift.async.AsyncMethodCallback<List<String>> resultHandler)
					throws TException
			{
				iface.getAllRunning(resultHandler);
			}
		}

	}

	public static class sendTask_args
			implements
				org.apache.thrift.TBase<sendTask_args, sendTask_args._Fields>,
				java.io.Serializable,
				Cloneable,
				Comparable<sendTask_args>
	{
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"sendTask_args");

		private static final org.apache.thrift.protocol.TField TASK_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"task", org.apache.thrift.protocol.TType.STRING, (short) 1);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static
		{
			schemes.put(StandardScheme.class,
					new sendTask_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new sendTask_argsTupleSchemeFactory());
		}

		public String task; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum
		{
			TASK((short) 1, "task");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static
			{
				for (_Fields field : EnumSet.allOf(_Fields.class))
				{
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId)
			{
				switch (fieldId)
				{
					case 1 : // TASK
						return TASK;
					default :
						return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId)
			{
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException(
							"Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name)
			{
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName)
			{
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			@Override
			public short getThriftFieldId()
			{
				return _thriftId;
			}

			@Override
			public String getFieldName()
			{
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static
		{
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.TASK,
					new org.apache.thrift.meta_data.FieldMetaData("task",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData
					.addStructMetaDataMap(sendTask_args.class, metaDataMap);
		}

		public sendTask_args()
		{
		}

		public sendTask_args(String task)
		{
			this();
			this.task = task;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public sendTask_args(sendTask_args other)
		{
			if (other.isSetTask())
			{
				this.task = other.task;
			}
		}

		@Override
		public sendTask_args deepCopy()
		{
			return new sendTask_args(this);
		}

		@Override
		public void clear()
		{
			this.task = null;
		}

		public String getTask()
		{
			return this.task;
		}

		public sendTask_args setTask(String task)
		{
			this.task = task;
			return this;
		}

		public void unsetTask()
		{
			this.task = null;
		}

		/**
		 * Returns true if field task is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetTask()
		{
			return this.task != null;
		}

		public void setTaskIsSet(boolean value)
		{
			if (!value)
			{
				this.task = null;
			}
		}

		@Override
		public void setFieldValue(_Fields field, Object value)
		{
			switch (field)
			{
				case TASK :
					if (value == null)
					{
						unsetTask();
					} else
					{
						setTask((String) value);
					}
					break;

			}
		}

		@Override
		public Object getFieldValue(_Fields field)
		{
			switch (field)
			{
				case TASK :
					return getTask();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		@Override
		public boolean isSet(_Fields field)
		{
			if (field == null)
			{
				throw new IllegalArgumentException();
			}

			switch (field)
			{
				case TASK :
					return isSetTask();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that)
		{
			if (that == null)
				return false;
			if (that instanceof sendTask_args)
				return this.equals((sendTask_args) that);
			return false;
		}

		public boolean equals(sendTask_args that)
		{
			if (that == null)
				return false;

			boolean this_present_task = true && this.isSetTask();
			boolean that_present_task = true && that.isSetTask();
			if (this_present_task || that_present_task)
			{
				if (!(this_present_task && that_present_task))
					return false;
				if (!this.task.equals(that.task))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode()
		{
			List<Object> list = new ArrayList<Object>();

			boolean present_task = true && (isSetTask());
			list.add(present_task);
			if (present_task)
				list.add(task);

			return list.hashCode();
		}

		@Override
		public int compareTo(sendTask_args other)
		{
			if (!getClass().equals(other.getClass()))
			{
				return getClass().getName()
						.compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetTask())
					.compareTo(other.isSetTask());
			if (lastComparison != 0)
			{
				return lastComparison;
			}
			if (isSetTask())
			{
				lastComparison = org.apache.thrift.TBaseHelper
						.compareTo(this.task, other.task);
				if (lastComparison != 0)
				{
					return lastComparison;
				}
			}
			return 0;
		}

		@Override
		public _Fields fieldForId(int fieldId)
		{
			return _Fields.findByThriftId(fieldId);
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException
		{
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		@Override
		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException
		{
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString()
		{
			StringBuilder sb = new StringBuilder("sendTask_args(");
			boolean first = true;

			sb.append("task:");
			if (this.task == null)
			{
				sb.append("null");
			} else
			{
				sb.append(this.task);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException
		{
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException
		{
			try
			{
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(
								out)));
			} catch (org.apache.thrift.TException te)
			{
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException
		{
			try
			{
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(
								in)));
			} catch (org.apache.thrift.TException te)
			{
				throw new java.io.IOException(te);
			}
		}

		private static class sendTask_argsStandardSchemeFactory
				implements
					SchemeFactory
		{
			@Override
			public sendTask_argsStandardScheme getScheme()
			{
				return new sendTask_argsStandardScheme();
			}
		}

		private static class sendTask_argsStandardScheme
				extends
					StandardScheme<sendTask_args>
		{

			@Override
			public void read(org.apache.thrift.protocol.TProtocol iprot,
					sendTask_args struct) throws org.apache.thrift.TException
			{
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true)
				{
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
					{
						break;
					}
					switch (schemeField.id)
					{
						case 1 : // TASK
							if (schemeField.type == org.apache.thrift.protocol.TType.STRING)
							{
								struct.task = iprot.readString();
								struct.setTaskIsSet(true);
							} else
							{
								org.apache.thrift.protocol.TProtocolUtil
										.skip(iprot, schemeField.type);
							}
							break;
						default :
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
									schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			@Override
			public void write(org.apache.thrift.protocol.TProtocol oprot,
					sendTask_args struct) throws org.apache.thrift.TException
			{
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.task != null)
				{
					oprot.writeFieldBegin(TASK_FIELD_DESC);
					oprot.writeString(struct.task);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class sendTask_argsTupleSchemeFactory
				implements
					SchemeFactory
		{
			@Override
			public sendTask_argsTupleScheme getScheme()
			{
				return new sendTask_argsTupleScheme();
			}
		}

		private static class sendTask_argsTupleScheme
				extends
					TupleScheme<sendTask_args>
		{

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot,
					sendTask_args struct) throws org.apache.thrift.TException
			{
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetTask())
				{
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetTask())
				{
					oprot.writeString(struct.task);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot,
					sendTask_args struct) throws org.apache.thrift.TException
			{
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0))
				{
					struct.task = iprot.readString();
					struct.setTaskIsSet(true);
				}
			}
		}

	}

	public static class sendTask_result
			implements
				org.apache.thrift.TBase<sendTask_result, sendTask_result._Fields>,
				java.io.Serializable,
				Cloneable,
				Comparable<sendTask_result>
	{
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"sendTask_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRING, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static
		{
			schemes.put(StandardScheme.class,
					new sendTask_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new sendTask_resultTupleSchemeFactory());
		}

		public String success; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum
		{
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static
			{
				for (_Fields field : EnumSet.allOf(_Fields.class))
				{
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId)
			{
				switch (fieldId)
				{
					case 0 : // SUCCESS
						return SUCCESS;
					default :
						return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId)
			{
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException(
							"Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name)
			{
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName)
			{
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			@Override
			public short getThriftFieldId()
			{
				return _thriftId;
			}

			@Override
			public String getFieldName()
			{
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static
		{
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData
					.addStructMetaDataMap(sendTask_result.class, metaDataMap);
		}

		public sendTask_result()
		{
		}

		public sendTask_result(String success)
		{
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public sendTask_result(sendTask_result other)
		{
			if (other.isSetSuccess())
			{
				this.success = other.success;
			}
		}

		@Override
		public sendTask_result deepCopy()
		{
			return new sendTask_result(this);
		}

		@Override
		public void clear()
		{
			this.success = null;
		}

		public String getSuccess()
		{
			return this.success;
		}

		public sendTask_result setSuccess(String success)
		{
			this.success = success;
			return this;
		}

		public void unsetSuccess()
		{
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess()
		{
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value)
		{
			if (!value)
			{
				this.success = null;
			}
		}

		@Override
		public void setFieldValue(_Fields field, Object value)
		{
			switch (field)
			{
				case SUCCESS :
					if (value == null)
					{
						unsetSuccess();
					} else
					{
						setSuccess((String) value);
					}
					break;

			}
		}

		@Override
		public Object getFieldValue(_Fields field)
		{
			switch (field)
			{
				case SUCCESS :
					return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		@Override
		public boolean isSet(_Fields field)
		{
			if (field == null)
			{
				throw new IllegalArgumentException();
			}

			switch (field)
			{
				case SUCCESS :
					return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that)
		{
			if (that == null)
				return false;
			if (that instanceof sendTask_result)
				return this.equals((sendTask_result) that);
			return false;
		}

		public boolean equals(sendTask_result that)
		{
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success)
			{
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode()
		{
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success);

			return list.hashCode();
		}

		@Override
		public int compareTo(sendTask_result other)
		{
			if (!getClass().equals(other.getClass()))
			{
				return getClass().getName()
						.compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess())
					.compareTo(other.isSetSuccess());
			if (lastComparison != 0)
			{
				return lastComparison;
			}
			if (isSetSuccess())
			{
				lastComparison = org.apache.thrift.TBaseHelper
						.compareTo(this.success, other.success);
				if (lastComparison != 0)
				{
					return lastComparison;
				}
			}
			return 0;
		}

		@Override
		public _Fields fieldForId(int fieldId)
		{
			return _Fields.findByThriftId(fieldId);
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException
		{
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		@Override
		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException
		{
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString()
		{
			StringBuilder sb = new StringBuilder("sendTask_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null)
			{
				sb.append("null");
			} else
			{
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException
		{
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException
		{
			try
			{
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(
								out)));
			} catch (org.apache.thrift.TException te)
			{
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException
		{
			try
			{
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(
								in)));
			} catch (org.apache.thrift.TException te)
			{
				throw new java.io.IOException(te);
			}
		}

		private static class sendTask_resultStandardSchemeFactory
				implements
					SchemeFactory
		{
			@Override
			public sendTask_resultStandardScheme getScheme()
			{
				return new sendTask_resultStandardScheme();
			}
		}

		private static class sendTask_resultStandardScheme
				extends
					StandardScheme<sendTask_result>
		{

			@Override
			public void read(org.apache.thrift.protocol.TProtocol iprot,
					sendTask_result struct) throws org.apache.thrift.TException
			{
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true)
				{
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
					{
						break;
					}
					switch (schemeField.id)
					{
						case 0 : // SUCCESS
							if (schemeField.type == org.apache.thrift.protocol.TType.STRING)
							{
								struct.success = iprot.readString();
								struct.setSuccessIsSet(true);
							} else
							{
								org.apache.thrift.protocol.TProtocolUtil
										.skip(iprot, schemeField.type);
							}
							break;
						default :
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
									schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			@Override
			public void write(org.apache.thrift.protocol.TProtocol oprot,
					sendTask_result struct) throws org.apache.thrift.TException
			{
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null)
				{
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeString(struct.success);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class sendTask_resultTupleSchemeFactory
				implements
					SchemeFactory
		{
			@Override
			public sendTask_resultTupleScheme getScheme()
			{
				return new sendTask_resultTupleScheme();
			}
		}

		private static class sendTask_resultTupleScheme
				extends
					TupleScheme<sendTask_result>
		{

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot,
					sendTask_result struct) throws org.apache.thrift.TException
			{
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess())
				{
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess())
				{
					oprot.writeString(struct.success);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot,
					sendTask_result struct) throws org.apache.thrift.TException
			{
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0))
				{
					struct.success = iprot.readString();
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class getStatus_args
			implements
				org.apache.thrift.TBase<getStatus_args, getStatus_args._Fields>,
				java.io.Serializable,
				Cloneable,
				Comparable<getStatus_args>
	{
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getStatus_args");

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static
		{
			schemes.put(StandardScheme.class,
					new getStatus_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new getStatus_argsTupleSchemeFactory());
		}

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum
		{
			;

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static
			{
				for (_Fields field : EnumSet.allOf(_Fields.class))
				{
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId)
			{
				switch (fieldId)
				{
					default :
						return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId)
			{
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException(
							"Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name)
			{
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName)
			{
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			@Override
			public short getThriftFieldId()
			{
				return _thriftId;
			}

			@Override
			public String getFieldName()
			{
				return _fieldName;
			}
		}
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static
		{
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData
					.addStructMetaDataMap(getStatus_args.class, metaDataMap);
		}

		public getStatus_args()
		{
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getStatus_args(getStatus_args other)
		{
		}

		@Override
		public getStatus_args deepCopy()
		{
			return new getStatus_args(this);
		}

		@Override
		public void clear()
		{
		}

		@Override
		public void setFieldValue(_Fields field, Object value)
		{
			switch (field)
			{
			}
		}

		@Override
		public Object getFieldValue(_Fields field)
		{
			switch (field)
			{
			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		@Override
		public boolean isSet(_Fields field)
		{
			if (field == null)
			{
				throw new IllegalArgumentException();
			}

			switch (field)
			{
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that)
		{
			if (that == null)
				return false;
			if (that instanceof getStatus_args)
				return this.equals((getStatus_args) that);
			return false;
		}

		public boolean equals(getStatus_args that)
		{
			if (that == null)
				return false;

			return true;
		}

		@Override
		public int hashCode()
		{
			List<Object> list = new ArrayList<Object>();

			return list.hashCode();
		}

		@Override
		public int compareTo(getStatus_args other)
		{
			if (!getClass().equals(other.getClass()))
			{
				return getClass().getName()
						.compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			return 0;
		}

		@Override
		public _Fields fieldForId(int fieldId)
		{
			return _Fields.findByThriftId(fieldId);
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException
		{
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		@Override
		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException
		{
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString()
		{
			StringBuilder sb = new StringBuilder("getStatus_args(");
			boolean first = true;

			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException
		{
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException
		{
			try
			{
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(
								out)));
			} catch (org.apache.thrift.TException te)
			{
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException
		{
			try
			{
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(
								in)));
			} catch (org.apache.thrift.TException te)
			{
				throw new java.io.IOException(te);
			}
		}

		private static class getStatus_argsStandardSchemeFactory
				implements
					SchemeFactory
		{
			@Override
			public getStatus_argsStandardScheme getScheme()
			{
				return new getStatus_argsStandardScheme();
			}
		}

		private static class getStatus_argsStandardScheme
				extends
					StandardScheme<getStatus_args>
		{

			@Override
			public void read(org.apache.thrift.protocol.TProtocol iprot,
					getStatus_args struct) throws org.apache.thrift.TException
			{
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true)
				{
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
					{
						break;
					}
					switch (schemeField.id)
					{
						default :
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
									schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			@Override
			public void write(org.apache.thrift.protocol.TProtocol oprot,
					getStatus_args struct) throws org.apache.thrift.TException
			{
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getStatus_argsTupleSchemeFactory
				implements
					SchemeFactory
		{
			@Override
			public getStatus_argsTupleScheme getScheme()
			{
				return new getStatus_argsTupleScheme();
			}
		}

		private static class getStatus_argsTupleScheme
				extends
					TupleScheme<getStatus_args>
		{

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot,
					getStatus_args struct) throws org.apache.thrift.TException
			{
				TTupleProtocol oprot = (TTupleProtocol) prot;
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot,
					getStatus_args struct) throws org.apache.thrift.TException
			{
				TTupleProtocol iprot = (TTupleProtocol) prot;
			}
		}

	}

	public static class getStatus_result
			implements
				org.apache.thrift.TBase<getStatus_result, getStatus_result._Fields>,
				java.io.Serializable,
				Cloneable,
				Comparable<getStatus_result>
	{
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getStatus_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRING, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static
		{
			schemes.put(StandardScheme.class,
					new getStatus_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new getStatus_resultTupleSchemeFactory());
		}

		public String success; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum
		{
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static
			{
				for (_Fields field : EnumSet.allOf(_Fields.class))
				{
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId)
			{
				switch (fieldId)
				{
					case 0 : // SUCCESS
						return SUCCESS;
					default :
						return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId)
			{
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException(
							"Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name)
			{
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName)
			{
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			@Override
			public short getThriftFieldId()
			{
				return _thriftId;
			}

			@Override
			public String getFieldName()
			{
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static
		{
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData
					.addStructMetaDataMap(getStatus_result.class, metaDataMap);
		}

		public getStatus_result()
		{
		}

		public getStatus_result(String success)
		{
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getStatus_result(getStatus_result other)
		{
			if (other.isSetSuccess())
			{
				this.success = other.success;
			}
		}

		@Override
		public getStatus_result deepCopy()
		{
			return new getStatus_result(this);
		}

		@Override
		public void clear()
		{
			this.success = null;
		}

		public String getSuccess()
		{
			return this.success;
		}

		public getStatus_result setSuccess(String success)
		{
			this.success = success;
			return this;
		}

		public void unsetSuccess()
		{
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess()
		{
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value)
		{
			if (!value)
			{
				this.success = null;
			}
		}

		@Override
		public void setFieldValue(_Fields field, Object value)
		{
			switch (field)
			{
				case SUCCESS :
					if (value == null)
					{
						unsetSuccess();
					} else
					{
						setSuccess((String) value);
					}
					break;

			}
		}

		@Override
		public Object getFieldValue(_Fields field)
		{
			switch (field)
			{
				case SUCCESS :
					return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		@Override
		public boolean isSet(_Fields field)
		{
			if (field == null)
			{
				throw new IllegalArgumentException();
			}

			switch (field)
			{
				case SUCCESS :
					return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that)
		{
			if (that == null)
				return false;
			if (that instanceof getStatus_result)
				return this.equals((getStatus_result) that);
			return false;
		}

		public boolean equals(getStatus_result that)
		{
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success)
			{
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode()
		{
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success);

			return list.hashCode();
		}

		@Override
		public int compareTo(getStatus_result other)
		{
			if (!getClass().equals(other.getClass()))
			{
				return getClass().getName()
						.compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess())
					.compareTo(other.isSetSuccess());
			if (lastComparison != 0)
			{
				return lastComparison;
			}
			if (isSetSuccess())
			{
				lastComparison = org.apache.thrift.TBaseHelper
						.compareTo(this.success, other.success);
				if (lastComparison != 0)
				{
					return lastComparison;
				}
			}
			return 0;
		}

		@Override
		public _Fields fieldForId(int fieldId)
		{
			return _Fields.findByThriftId(fieldId);
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException
		{
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		@Override
		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException
		{
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString()
		{
			StringBuilder sb = new StringBuilder("getStatus_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null)
			{
				sb.append("null");
			} else
			{
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException
		{
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException
		{
			try
			{
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(
								out)));
			} catch (org.apache.thrift.TException te)
			{
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException
		{
			try
			{
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(
								in)));
			} catch (org.apache.thrift.TException te)
			{
				throw new java.io.IOException(te);
			}
		}

		private static class getStatus_resultStandardSchemeFactory
				implements
					SchemeFactory
		{
			@Override
			public getStatus_resultStandardScheme getScheme()
			{
				return new getStatus_resultStandardScheme();
			}
		}

		private static class getStatus_resultStandardScheme
				extends
					StandardScheme<getStatus_result>
		{

			@Override
			public void read(org.apache.thrift.protocol.TProtocol iprot,
					getStatus_result struct) throws org.apache.thrift.TException
			{
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true)
				{
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
					{
						break;
					}
					switch (schemeField.id)
					{
						case 0 : // SUCCESS
							if (schemeField.type == org.apache.thrift.protocol.TType.STRING)
							{
								struct.success = iprot.readString();
								struct.setSuccessIsSet(true);
							} else
							{
								org.apache.thrift.protocol.TProtocolUtil
										.skip(iprot, schemeField.type);
							}
							break;
						default :
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
									schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			@Override
			public void write(org.apache.thrift.protocol.TProtocol oprot,
					getStatus_result struct) throws org.apache.thrift.TException
			{
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null)
				{
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeString(struct.success);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getStatus_resultTupleSchemeFactory
				implements
					SchemeFactory
		{
			@Override
			public getStatus_resultTupleScheme getScheme()
			{
				return new getStatus_resultTupleScheme();
			}
		}

		private static class getStatus_resultTupleScheme
				extends
					TupleScheme<getStatus_result>
		{

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot,
					getStatus_result struct) throws org.apache.thrift.TException
			{
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess())
				{
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess())
				{
					oprot.writeString(struct.success);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot,
					getStatus_result struct) throws org.apache.thrift.TException
			{
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0))
				{
					struct.success = iprot.readString();
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class getAllRunning_args
			implements
				org.apache.thrift.TBase<getAllRunning_args, getAllRunning_args._Fields>,
				java.io.Serializable,
				Cloneable,
				Comparable<getAllRunning_args>
	{
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getAllRunning_args");

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static
		{
			schemes.put(StandardScheme.class,
					new getAllRunning_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new getAllRunning_argsTupleSchemeFactory());
		}

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum
		{
			;

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static
			{
				for (_Fields field : EnumSet.allOf(_Fields.class))
				{
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId)
			{
				switch (fieldId)
				{
					default :
						return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId)
			{
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException(
							"Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name)
			{
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName)
			{
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			@Override
			public short getThriftFieldId()
			{
				return _thriftId;
			}

			@Override
			public String getFieldName()
			{
				return _fieldName;
			}
		}
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static
		{
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					getAllRunning_args.class, metaDataMap);
		}

		public getAllRunning_args()
		{
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getAllRunning_args(getAllRunning_args other)
		{
		}

		@Override
		public getAllRunning_args deepCopy()
		{
			return new getAllRunning_args(this);
		}

		@Override
		public void clear()
		{
		}

		@Override
		public void setFieldValue(_Fields field, Object value)
		{
			switch (field)
			{
			}
		}

		@Override
		public Object getFieldValue(_Fields field)
		{
			switch (field)
			{
			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		@Override
		public boolean isSet(_Fields field)
		{
			if (field == null)
			{
				throw new IllegalArgumentException();
			}

			switch (field)
			{
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that)
		{
			if (that == null)
				return false;
			if (that instanceof getAllRunning_args)
				return this.equals((getAllRunning_args) that);
			return false;
		}

		public boolean equals(getAllRunning_args that)
		{
			if (that == null)
				return false;

			return true;
		}

		@Override
		public int hashCode()
		{
			List<Object> list = new ArrayList<Object>();

			return list.hashCode();
		}

		@Override
		public int compareTo(getAllRunning_args other)
		{
			if (!getClass().equals(other.getClass()))
			{
				return getClass().getName()
						.compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			return 0;
		}

		@Override
		public _Fields fieldForId(int fieldId)
		{
			return _Fields.findByThriftId(fieldId);
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException
		{
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		@Override
		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException
		{
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString()
		{
			StringBuilder sb = new StringBuilder("getAllRunning_args(");
			boolean first = true;

			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException
		{
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException
		{
			try
			{
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(
								out)));
			} catch (org.apache.thrift.TException te)
			{
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException
		{
			try
			{
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(
								in)));
			} catch (org.apache.thrift.TException te)
			{
				throw new java.io.IOException(te);
			}
		}

		private static class getAllRunning_argsStandardSchemeFactory
				implements
					SchemeFactory
		{
			@Override
			public getAllRunning_argsStandardScheme getScheme()
			{
				return new getAllRunning_argsStandardScheme();
			}
		}

		private static class getAllRunning_argsStandardScheme
				extends
					StandardScheme<getAllRunning_args>
		{

			@Override
			public void read(org.apache.thrift.protocol.TProtocol iprot,
					getAllRunning_args struct)
					throws org.apache.thrift.TException
			{
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true)
				{
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
					{
						break;
					}
					switch (schemeField.id)
					{
						default :
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
									schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			@Override
			public void write(org.apache.thrift.protocol.TProtocol oprot,
					getAllRunning_args struct)
					throws org.apache.thrift.TException
			{
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getAllRunning_argsTupleSchemeFactory
				implements
					SchemeFactory
		{
			@Override
			public getAllRunning_argsTupleScheme getScheme()
			{
				return new getAllRunning_argsTupleScheme();
			}
		}

		private static class getAllRunning_argsTupleScheme
				extends
					TupleScheme<getAllRunning_args>
		{

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot,
					getAllRunning_args struct)
					throws org.apache.thrift.TException
			{
				TTupleProtocol oprot = (TTupleProtocol) prot;
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot,
					getAllRunning_args struct)
					throws org.apache.thrift.TException
			{
				TTupleProtocol iprot = (TTupleProtocol) prot;
			}
		}

	}

	public static class getAllRunning_result
			implements
				org.apache.thrift.TBase<getAllRunning_result, getAllRunning_result._Fields>,
				java.io.Serializable,
				Cloneable,
				Comparable<getAllRunning_result>
	{
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getAllRunning_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.LIST, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static
		{
			schemes.put(StandardScheme.class,
					new getAllRunning_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new getAllRunning_resultTupleSchemeFactory());
		}

		public List<String> success; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum
		{
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static
			{
				for (_Fields field : EnumSet.allOf(_Fields.class))
				{
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId)
			{
				switch (fieldId)
				{
					case 0 : // SUCCESS
						return SUCCESS;
					default :
						return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId)
			{
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException(
							"Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name)
			{
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName)
			{
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			@Override
			public short getThriftFieldId()
			{
				return _thriftId;
			}

			@Override
			public String getFieldName()
			{
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static
		{
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.ListMetaData(
									org.apache.thrift.protocol.TType.LIST,
									new org.apache.thrift.meta_data.FieldValueMetaData(
											org.apache.thrift.protocol.TType.STRING))));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					getAllRunning_result.class, metaDataMap);
		}

		public getAllRunning_result()
		{
		}

		public getAllRunning_result(List<String> success)
		{
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getAllRunning_result(getAllRunning_result other)
		{
			if (other.isSetSuccess())
			{
				List<String> __this__success = new ArrayList<String>(
						other.success);
				this.success = __this__success;
			}
		}

		@Override
		public getAllRunning_result deepCopy()
		{
			return new getAllRunning_result(this);
		}

		@Override
		public void clear()
		{
			this.success = null;
		}

		public int getSuccessSize()
		{
			return (this.success == null) ? 0 : this.success.size();
		}

		public java.util.Iterator<String> getSuccessIterator()
		{
			return (this.success == null) ? null : this.success.iterator();
		}

		public void addToSuccess(String elem)
		{
			if (this.success == null)
			{
				this.success = new ArrayList<String>();
			}
			this.success.add(elem);
		}

		public List<String> getSuccess()
		{
			return this.success;
		}

		public getAllRunning_result setSuccess(List<String> success)
		{
			this.success = success;
			return this;
		}

		public void unsetSuccess()
		{
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess()
		{
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value)
		{
			if (!value)
			{
				this.success = null;
			}
		}

		@Override
		public void setFieldValue(_Fields field, Object value)
		{
			switch (field)
			{
				case SUCCESS :
					if (value == null)
					{
						unsetSuccess();
					} else
					{
						setSuccess((List<String>) value);
					}
					break;

			}
		}

		@Override
		public Object getFieldValue(_Fields field)
		{
			switch (field)
			{
				case SUCCESS :
					return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		@Override
		public boolean isSet(_Fields field)
		{
			if (field == null)
			{
				throw new IllegalArgumentException();
			}

			switch (field)
			{
				case SUCCESS :
					return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that)
		{
			if (that == null)
				return false;
			if (that instanceof getAllRunning_result)
				return this.equals((getAllRunning_result) that);
			return false;
		}

		public boolean equals(getAllRunning_result that)
		{
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success)
			{
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode()
		{
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success);

			return list.hashCode();
		}

		@Override
		public int compareTo(getAllRunning_result other)
		{
			if (!getClass().equals(other.getClass()))
			{
				return getClass().getName()
						.compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess())
					.compareTo(other.isSetSuccess());
			if (lastComparison != 0)
			{
				return lastComparison;
			}
			if (isSetSuccess())
			{
				lastComparison = org.apache.thrift.TBaseHelper
						.compareTo(this.success, other.success);
				if (lastComparison != 0)
				{
					return lastComparison;
				}
			}
			return 0;
		}

		@Override
		public _Fields fieldForId(int fieldId)
		{
			return _Fields.findByThriftId(fieldId);
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException
		{
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		@Override
		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException
		{
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString()
		{
			StringBuilder sb = new StringBuilder("getAllRunning_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null)
			{
				sb.append("null");
			} else
			{
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException
		{
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException
		{
			try
			{
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(
								out)));
			} catch (org.apache.thrift.TException te)
			{
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException
		{
			try
			{
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(
								in)));
			} catch (org.apache.thrift.TException te)
			{
				throw new java.io.IOException(te);
			}
		}

		private static class getAllRunning_resultStandardSchemeFactory
				implements
					SchemeFactory
		{
			@Override
			public getAllRunning_resultStandardScheme getScheme()
			{
				return new getAllRunning_resultStandardScheme();
			}
		}

		private static class getAllRunning_resultStandardScheme
				extends
					StandardScheme<getAllRunning_result>
		{

			@Override
			public void read(org.apache.thrift.protocol.TProtocol iprot,
					getAllRunning_result struct)
					throws org.apache.thrift.TException
			{
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true)
				{
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
					{
						break;
					}
					switch (schemeField.id)
					{
						case 0 : // SUCCESS
							if (schemeField.type == org.apache.thrift.protocol.TType.LIST)
							{
								{
									org.apache.thrift.protocol.TList _list0 = iprot
											.readListBegin();
									struct.success = new ArrayList<String>(
											_list0.size);
									String _elem1;
									for (int _i2 = 0; _i2 < _list0.size; ++_i2)
									{
										_elem1 = iprot.readString();
										struct.success.add(_elem1);
									}
									iprot.readListEnd();
								}
								struct.setSuccessIsSet(true);
							} else
							{
								org.apache.thrift.protocol.TProtocolUtil
										.skip(iprot, schemeField.type);
							}
							break;
						default :
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
									schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			@Override
			public void write(org.apache.thrift.protocol.TProtocol oprot,
					getAllRunning_result struct)
					throws org.apache.thrift.TException
			{
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null)
				{
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					{
						oprot.writeListBegin(
								new org.apache.thrift.protocol.TList(
										org.apache.thrift.protocol.TType.STRING,
										struct.success.size()));
						for (String _iter3 : struct.success)
						{
							oprot.writeString(_iter3);
						}
						oprot.writeListEnd();
					}
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getAllRunning_resultTupleSchemeFactory
				implements
					SchemeFactory
		{
			@Override
			public getAllRunning_resultTupleScheme getScheme()
			{
				return new getAllRunning_resultTupleScheme();
			}
		}

		private static class getAllRunning_resultTupleScheme
				extends
					TupleScheme<getAllRunning_result>
		{

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot,
					getAllRunning_result struct)
					throws org.apache.thrift.TException
			{
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess())
				{
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess())
				{
					{
						oprot.writeI32(struct.success.size());
						for (String _iter4 : struct.success)
						{
							oprot.writeString(_iter4);
						}
					}
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot,
					getAllRunning_result struct)
					throws org.apache.thrift.TException
			{
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0))
				{
					{
						org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.STRING,
								iprot.readI32());
						struct.success = new ArrayList<String>(_list5.size);
						String _elem6;
						for (int _i7 = 0; _i7 < _list5.size; ++_i7)
						{
							_elem6 = iprot.readString();
							struct.success.add(_elem6);
						}
					}
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

}
